<?php

namespace TDN\Bundle\NanaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;

use TDN\Bundle\NanaBundle\Entity\Nana;

/**
 * NanaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NanaRepository extends EntityRepository implements UserProviderInterface {

    public function loadUserByUsername($username) {
        $q = $q = $this
            ->createQueryBuilder('u')
            ->select('u, g')
            ->leftJoin('u.roles', 'g')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery();

        try {
            // La méthode Query::getSingleResult() lance une exception
            // s'il n'y a pas d'entrée correspondante aux critères
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin AcmeUserBundle:User object identified by "%s".', $username), null, 0, $e);
        }

        return $user;
    }

   public function findLimitedAll($limite, $offset) {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u')
            ->setMaxResults($limite)
            ->setFirstResult($offset)
            ->getQuery();

        $users = $q->getResult();
        return $users;
    }

    public function count($critere = 'all') {
        $q = $this
            ->createQueryBuilder('u')
            ->select('count(u.idNana)')
            ->getQuery();

        $nombre = $q->getSingleResult();
        return array_pop($nombre);
    }

    public function queryExperts($domaine = NULL) {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.roles', 'g')
            ->where('g.role = :role OR g.role = :role1 OR g.role = :role2')
            ->setParameter('role', 'ROLE_EXPERT')
            ->setParameter('role1', 'ROLE_JOURNALISTE')
            ->setParameter('role2', 'ROLE_ADMIN');

        return $q;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    public function selectionNanas($limite = 10) {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.lnAvatar', 'a')
            ->orderBy('u.idNana', 'DESC')
            ->setMaxResults($limite)
            ->getQuery();

        $results = $q->getResult();
        return $results;
    }

    public function nanaDeLaSemaine() {

        $now = new \DateTime;
        $semaine = $now->format('W');
        $nana = $this->findOneByAdresseIP((integer)$semaine);
        if ($nana instanceof Nana) {
            return $nana;
        }
        return $this->find(1);
    }

    public function isNanaDeLaSemaine ($semaine) {

        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('TDN\Bundle\Nanabundle\Entity\Nana', 'n');
        $rsm->addFieldResult('n', 'id', 'idNana');
        $rsm->addFieldResult('n', 'username', 'username');
        $rsm->addFieldResult('n', 'email', 'email');
        $rsm->addFieldResult('n', 'popularite', 'popularite');
        $rsm->addFieldResult('n', 'ip_adresse', 'adresseIP');
        $rsm->addFieldResult('n', 'date_inscription', 'dateInscription');
        // $rsm->addFieldResult('n', 'avatar_id', 'lnAvatar');
        // $rsm->addJoinedEntityResult('TDN\Bundle\NanaBundle\Entity\NanaAs' , 'r', 'n', 'roles');
        // $rsm->addFieldResult('a', 'address_id', 'id');
        // $rsm->addFieldResult('a', 'street', 'street');
        // $rsm->addFieldResult('a', 'city', 'city');

        $timeline = array();
        for ($i = 0; $i <= 3; $i++) {
            $t = $semaine - $i;
            $t = ($t > 0) ? $t : 52 + $t;
            $timeline[] = $t;
        }
        $timeline = implode('|', $timeline);
        $sql = 
            'SELECT n.id, n.username, n.email, n.popularite, n.ip_adresse, n.date_inscription 
             FROM Nana n
             INNER JOIN NanaAs r ON r.for_nana = n.id
             WHERE n.avatar_id IS NOT NULL 
                AND n.ip_adresse IS NULL 
                AND n.popularite REGEXP "('.$timeline.').:[1-9][[:digit:]]*" 
                AND r.for_role LIKE "ROLE_USER"';

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        // $query->setParameter(1, $semaine-1);
        $nanas = $query->getResult();
        // print_r($nanas); die;
        if (!empty($nanas)) {
            $candidats = array();
            foreach ($nanas as $n) {
                $scores = json_decode($n->getPopularite());
                $instantane = 0;
                for ($i = 0; $i <= 3; $i++) {
                    $t = $semaine - $i;
                    $t = ($t > 0) ? $t : 52 - $t;
                    $instantane += $scores->$t * pow(2, 3 - $i);
                }
                $candidats[$instantane] = $n->getIdNana();
            }
            $errSort = ksort($candidats, SORT_NUMERIC);
            return $this->find(array_pop($candidats));
        } else {
            return $this->find(3);
        }
    }

    public function isNanaDuMois () {

        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('TDN\Bundle\Nanabundle\Entity\Nana', 'n');
        $rsm->addFieldResult('n', 'id', 'idNana');
        $rsm->addFieldResult('n', 'username', 'username');
        $rsm->addFieldResult('n', 'popularite', 'popularite');

        $sql = 
            'SELECT n.id, n.username, n.popularite 
             FROM Nana n
             INNER JOIN NanaAs r ON r.for_nana = n.id
             WHERE n.popularite REGEXP "score.:[1-9][0-9]{3}"
                AND n.username NOT IN ("nina", "patoche", "sydonie") 
                AND r.for_role LIKE "ROLE_USER"';

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        // $query->setParameter(1, $semaine-1);
        $nanas = $query->getResult();
        // print_r("[".count($nanas)."]"); die;
        if (!empty($nanas)) {
            $candidats = array();
            foreach ($nanas as $n) {
                $scores = json_decode($n->getPopularite());
                $candidats[] = $n->getIdNana();
            }
            $errSort = shuffle($candidats);
            return $candidats;
        } else {
            return false;
        }
    }

    public function findDoubleRegistration ($username, $email) {
        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('u')
                    ->where($qb->expr()->orX(
                        $qb->expr()->eq('u.username', ':username'),
                        $qb->expr()->eq('u.email', ':email')))
                    ->setParameter('username', $username)
                    ->setParameter('email', $email)
                    ->getQuery();

      $resultats = $query->getResult();
      if (count($resultats) > 0) {
        return $resultats[0];
      } else {
        return false;
      }
    }

    public function findStrictOneByEmail($email) {
        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('u')
                    ->where($qb->expr()->andX(
                        $qb->expr()->like('u.email', ':email'),
                        $qb->expr()->isNotNull('u.email')
                    ))
                    ->setParameter('email', $email)
                    ->setMaxResults(1)
                    ->getQuery();

      $resultats = $query->getResult();
      if (count($resultats) > 0) {
        return $resultats[0];
      } else {
        return false;
      }        
    }

    public function findProductions($id) {
        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('p.titre, p.idDocument, u.idNana')
                    ->innerJoin('u.filProductions', 'p')
                    ->where($qb->expr()->eq('u.idNana', ':id'))
                    ->setParameter('id', $id)
                    ->getQuery();
        $prods = $query->getResult();
        print_r(count($prods));
        return $prods;
    }

    public function findBySeed ($seed) {

        $_extSeed = "%$seed%";

        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('u')
                    ->where($qb->expr()->orX(
                        $qb->expr()->like('u.username', ':seed'),
                        $qb->expr()->like('u.prenom', ':seed'),
                        $qb->expr()->like('u.nom', ':seed')))
                    ->setParameter('seed', $_extSeed)
                    ->getQuery();

        $resultats = $query->getResult();
        return $resultats;
    }

    public function findByRole($role) {
        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('u, r')
                    ->leftJoin('u.roles', 'r')
                    ->where($qb->expr()->like('r.role', ':role'))
                    ->setParameter('role', $role)
                    ->setMaxResults(20)
                    ->orderBy('u.nom', 'ASC')
                    // ->distinct(true)
                    ->getQuery();
 
        $team = $query->getResult();
        return $team;
    }


    public function likes () {
        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('partial u.{idNana}, j')
                    ->leftJoin('u.filActivite', 'j')
                    ->where($qb->expr()->like('j.action', ':action'))
                    ->setParameter('action', 'AIME')
                    ->setMaxResults(20)
                    ->orderBy('j.dateEntree', 'ASC')
                    // ->distinct(true)
                    ->getQuery();
 
        $team = $query->getResult();
        return $team;
    }

   public function findNanaNewsletter ($debut = 0, $lot = 10) {

        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('u')
                    ->where($qb->expr()->andX(
                        $qb->expr()->eq('u.newsletter', ':true'),
                        $qb->expr()->gte('u.idNana', ':debut')
                    ))
                    ->setParameter('true', true)
                    ->setParameter('debut', $debut)
                    ->setMaxResults($lot)
                    ->getQuery();

        $resultats = $query->getResult();
        return $resultats;
    }

    public function findPop ($debut = 0) {
        $qb = $this->createQueryBuilder('u');
        $query = $qb->select('u.idNana')
                    ->where($qb->expr()->andX(
                        $qb->expr()->gt('u.idNana', ':debut'),
                        $qb->expr()->lte('u.dateInscription', ':inscription')
                    ))
                    ->setParameter('debut', $debut)
                    ->setParameter('inscription', '2014-05-01 00:00:00')
                    ->setMaxResults(1000)
                    ->getQuery();

        $resultats = $query->getResult();
        return $resultats;
    }

}