<?php

namespace TDN\Bundle\ConcoursBundle\Entity;

use Doctrine\ORM\EntityRepository;

use TDN\Bundle\DocumentBundle\Entity\DocumentRepository;

/**
 * ConcoursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConcoursRepository extends DocumentRepository
{

	public function findMostRecent ($limite, $panel = NULL) {
		return parent::findMostRecentDocument($limite, 'CONCOURS_PUBLIE', $panel);
	}

	public function findActive () {

		$q = $this->createQueryBuilder('c')
			->where('c.dateArret >= :now', 'c.dateDebut < :now')
			->setParameter('now', new \DateTime)
			->orderby('c.dateArret', 'DESC')
			->getQuery();

		return $q;
	}	

	public function findStopped () {

		$q = $this->createQueryBuilder('c')
			->where('c.dateArret < :now')
			->setParameter('now', new \DateTime)
			->orderby('c.dateArret', 'DESC')
			->getQuery();

		return $q->getResult();
	}

	public function findTiragesAEffectuer () {

		$qb = $this->createQueryBuilder('c');
		$qexpr = $qb->expr();
		$query = $qb->select('c')
			->where($qexpr->andX(
				$qexpr->lt('c.dateArret', ':now'),
				$qexpr->like('c.statut', $qexpr->literal('CONCOURS_PUBLIE'))
			))
			->setParameter('now', new \DateTime)
			->orderby('c.dateArret', 'ASC')
			->getQuery();

		return $query->getResult();
	}

	public function findLastActive () {

		$qb = $this->createQueryBuilder('c');
		$qexpr = $qb->expr();
		$query = $qb->select('c')
					->where(
						$qexpr->andX(
							$qexpr->lte('c.dateDebut', ':now'),
							$qexpr->gte('c.dateArret', ':now'),
							$qexpr->like('c.statut', $qexpr->literal('CONCOURS_PUBLIE'))
					))
					->setParameter('now', new \DateTime)
					->orderby('c.datePublication', 'DESC')
					->setMaxResults(2)
					->getQuery();
					// ->useResultCache(true, 3600);

		return $query->getResult();

	}

	public function findAllActive () {

		$qb = $this->createQueryBuilder('c');
		$qexpr = $qb->expr();
		$query = $qb->select('c')
					->where(
						$qexpr->andX(
							$qexpr->lte('c.dateDebut', ':now'),
							$qexpr->gte('c.dateArret', ':now'),
							$qexpr->like('c.statut', $qexpr->literal('CONCOURS_PUBLIE'))
					))
					->setParameter('now', new \DateTime)
					->orderby('c.dateArret', 'DESC')
					->getQuery()
					->useResultCache(true, 1200);

		return $query->getResult();
	}

	public function findDigest () {

        $sql = 
            "SELECT c.idDocument, c.titre, c.statut, count(p.idParticipation) participants
             FROM ConcoursBundle:Concours c
             LEFT JOIN ConcoursBundle:ConcoursParticipant p WITH c.idDocument = p.lnConcours
             GROUP BY c.idDocument
             ORDER BY c.idDocument DESC";

        $concours = $this->getEntityManager()
                     	 ->createQuery($sql)
                    	 ->getResult();

        // print_r($concours);
        return $concours;
     }
}
