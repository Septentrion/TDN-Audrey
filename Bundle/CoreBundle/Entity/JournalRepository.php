<?php

namespace TDN\Bundle\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * JournalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JournalRepository extends EntityRepository
{

	public function findMostRecent ($limite, $panel = NULL) {
		$qb = $this->createQueryBuilder('u');
		$qexpr = $qb->expr();
		$query = $qb->select('u');
		if ($panel != NULL) {
			$query = $query->innerjoin('u.lnRubrique', 'r')
						   ->where($qexpr->in('r.slug', ':listeRubriques'))
						   ->setParameter('listeRubriques', $panel);
		}
		$query = $query->orderBy('u.dateEntree', 'DESC')
	        		   ->setMaxResults($limite)
	        		   ->getQuery();

	     $last = $query->getResult();
	     return $last;
	}

    public function findMyJournal ($me, array $actions = NULL) {
        $qb = $this->createQueryBuilder('u');
        $qexpr = $qb->expr();
        $query = $qb->select('u')->innerjoin('u.lnRubrique', 'r')->innerjoin('u.lnVeilleur', 'n');
        if ($actions != NULL) {
            $query = $query->where($qexpr->andX(
                                $qexpr->in('u.action', ':listeActions'),
                                $qexpr->eq('n.idNana', ':me')
                                ))
                           ->setParameter('listeActions', $actions)
                           ->setParameter('me', $me);
        } else {
            $query = $query->where($qexpr->eq('n.idNana', ':me'))
                           ->setParameter('me', $me);
        }
        $query = $query->orderBy('u.dateEntree', 'DESC')
                       ->getQuery();

         $entrees = $query->getResult();
         // if ($me === 1) 
         return $entrees;
    }

    public function likes ($idNana) {
        $qb = $this->createQueryBuilder('j');
        $query = $qb->select('j')
        			->innerjoin('j.lnActeur', 'u')
                    ->where($qb->expr()->andX(
                    	$qb->expr()->like('j.action', ':action'),
                    	$qb->expr()->like('u.idNana', ':acteur')))
                    ->setParameter('action', 'AIME')
                    ->setParameter('acteur', $idNana)
                    ->setMaxResults(20)
                    ->orderBy('j.dateEntree', 'DESC')
                    // ->distinct(true)
                    ->getQuery();
 
        $team = $query->getResult();
        return $team;
    }
}
