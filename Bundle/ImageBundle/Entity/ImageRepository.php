<?php

namespace TDN\Bundle\ImageBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends EntityRepository {

	public function findSpecialNames()
	{
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('TDN\Bundle\DocumentBundle\Entity\Document', 'd');
        $rsm->addFieldResult('d', 'id', 'idDocument');
        // $rsm->addFieldResult('d', 'date_publication', 'datePublication');
        $rsm->addMetaResult('d', 'typeDocument', 'typeDocument', true);
        $rsm->setDiscriminatorColumn('d', 'typeDocument');
        // $rsm->addMetaResult('d', 'ln_auteur', 'ln_auteur');
        // $rsm->addJoinedEntityResult('TDN\Bundle\ImageBundle\Entity\Image', 'i', 'd', 'id');
        // $rsm->addFieldResult('i', 'fichier', 'fichier');
        // $rsm->addJoinedEntityResult('TDN\Bundle\NanaBundle\Entity\Nana', 'n', 'd', 'lnAuteur');
        // $rsm->addFieldResult('n', 'id', 'idNana');

        $sql = 
            'SELECT d.id, d.typeDocument
             FROM Document d
             INNER JOIN Image i ON d.id = i.id
             INNER JOIN Nana n ON n.id = d.ln_auteur
             WHERE i.fichier REGEXP "[^a-zA-Z0-9_\.\-]"
             LIMIT 2';

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $fichiers = $query->getResult();

        return $fichiers;
	}

	public function findSpecialNamesExtended() {

		$qb = $this->createQueryBuilder('u');
		$query = $qb->select('u')
		   			->where('u.fichier REGEXP :expression')
		   			->setParameter('expression',  '[^a-zA-Z0-9_\.\-]')
		   			->getquery();

         $entrees = $query->getResult();

         return $entrees;
	}
}
