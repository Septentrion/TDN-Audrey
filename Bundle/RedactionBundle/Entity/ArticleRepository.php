<?php

namespace TDN\Bundle\RedactionBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

use TDN\Bundle\DocumentBundle\Entity\DocumentRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends DocumentRepository
{

	public function findMostRead ($limite, $panel = NULL) {
		$qb = $this->createQueryBuilder('u');
		$qexpr = $qb->expr();
		$query = $qb->select('u');
		if ($panel != NULL) {
			$query = $query->innerjoin('u.rubriques', 'r')
						   ->where($qexpr->andX(
						   		$qexpr->like('u.statut', $qb->expr()->literal('ARTICLE_PUBLIE')),
						   		$qexpr->in('r.slug', ':listeRubriques')
						   	))
						   ->setParameter('listeRubriques', $panel);
		} else {
			$query = $query->where($qexpr->like('u.statut', $qb->expr()->literal('ARTICLE_PUBLIE')));
		}
		$query = $query->orderBy('u.commentThread', 'DESC')
	        		   ->setMaxResults($limite)
	        		   ->getQuery()
	        		   ->useResultCache(true);

	     $last = $query->getResult();
	     return $last;
	}

	public function findMostLiked ($limite, $panel = NULL) {
		return parent::findMostLikedDocument($limite, 'ARTICLE_PUBLIE', $panel);
	}

	public function findMostRecent ($limite, $panel = NULL) {
		return parent::findMostRecentDocument($limite, 'ARTICLE_PUBLIE', $panel);
	}

	public function findPage ($page, $size = 50, $all = true) {
		$offset = ($page - 1) * $size;
		$qb = $this->createQueryBuilder('u');
		$query = $qb->select('u');
		if ($all !== true && is_numeric($all)) {
			$query = $query->where($qb->expr()->eq('u.lnAuteur', ':id'))
						   ->setParameter('id', $all);
		}
	    $query = $query->orderBy('u.datePublication', 'DESC')
	        		   ->setFirstResult($offset);
	    if ($size !== 0) {
	    	$query = $query->setMaxResults($size);
	    }
	    $query = $query->getQuery();
	    // ->where($qb->expr()->like('u.statut', $qb->expr()->literal('ARTICLE_PUBLIE')))

	     $last = $query->getResult();
	     return $last;
	}

	public function findRedactionRecent($limite, $panel = NULL)
	{
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('TDN\Bundle\DocumentBundle\Entity\Document', 'a');
        $rsm->addFieldResult('a', 'id', 'idDocument');
        $rsm->addFieldResult('a', 'titre', 'titre');
        $rsm->addFieldResult('a', 'slug', 'slug');
        // $rsm->addFieldResult('n', 'popularite', 'popularite');
        // $rsm->addFieldResult('n', 'ip_adresse', 'adresseIP');
        // $rsm->addFieldResult('n', 'date_inscription', 'dateInscription');
        // $rsm->addFieldResult('n', 'avatar_id', 'lnAvatar');
        // $rsm->addJoinedEntityResult('TDN\Bundle\DocumentRubiqueBundle\Entity\DocumentRubrique' , 'r', 'n', 'roles');
        // $rsm->addFieldResult('a', 'address_id', 'id');
        // $rsm->addFieldResult('a', 'street', 'street');
        // $rsm->addFieldResult('a', 'city', 'city');

        if (!is_null($panel)) {
        	$withPanel = "AND r.slug IN ('".implode(",'", $panel).")";
        } else {
        	$withPanel = '';
        }

        $sql = 
            "SELECT a.id, a.titre, a.slug
             FROM Document a
             INNER JOIN DocumentThemes t ON t.for_document = a.id
             INNER JOIN DocumentRubrique r ON t.for_rubrique = r.id
             WHERE a.statut IN ('ARTICLE_PUBLIE', 'SELECTION_PUBLIEE') $withPanel 
             ORDER BY a.date_publication DESC
             LIMIT ".$limite;
print_r($sql);
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        // $query->setParameter(1, $semaine-1);
        $articles = $query->getResult();
        return $articles;
      }

 }
